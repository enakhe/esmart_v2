// <auto-generated />
using System;
using ESMART.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ESMART.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250530074254_RoomTypeReservaton")]
    partial class RoomTypeReservaton
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ESMART")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ESMART.Domain.Entities.Configuration.AuthorizationCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuthorizationCards", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Configuration.Hotel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("LogoUrl")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hotels", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Configuration.HotelSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("HotelSettings", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Configuration.LicenceInformation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HotelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenceKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LicenceInformation", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Configuration.SettingsCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SettingsCategories", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Configuration.UserBackupSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastBackup")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BackupSettings", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NoOfUser")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("User", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Data.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GuestAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverStay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SettledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("GuestAccountId");

                    b.HasIndex("GuestId");

                    b.HasIndex("RoomId");

                    b.ToTable("Bookings", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.BookingDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GuestAccountId");

                    b.HasIndex("RoomId");

                    b.ToTable("BookingDetail", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.Guest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("GuestImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Guests", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.GuestAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AllowBarAndRes")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowLaundry")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DirectPayments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FundedBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastFunded")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OtherCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TopUps")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.ToTable("GuestAccounts", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.GuestIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Document")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GuestId")
                        .IsUnique()
                        .HasFilter("[GuestId] IS NOT NULL");

                    b.ToTable("GuestIdentities", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.GuestTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BillPosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Consumer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GuestAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GuestTraId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("GuestAccountId");

                    b.HasIndex("GuestId");

                    b.HasIndex("RoomId");

                    b.ToTable("GuestTransactions", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ArrivateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GuestId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.RoomBooking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OccupantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccupantPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomBookings", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.RoomNightCharge", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Night")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomBookingId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomBookingId");

                    b.ToTable("RoomNightCharges", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.RoomTypeReservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AdvancePayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GuestAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("GuestAccountId");

                    b.HasIndex("GuestId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("RoomTypeReservations", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Area", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Building", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buildings", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Floor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FloorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("AreaId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.RoomType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.InventoryItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReorderLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReorderQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitOfMeasure")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InventoryItems", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.MenuCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MenuCategories", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.MenuItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InventoryItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDirectStock")
                        .HasColumnType("bit");

                    b.Property<string>("MenuCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceArea")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemID");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("MenuItems", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.MenuItemRecipe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InventoryItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MenuItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InventoryItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuItemRecipes", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomBookingId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("GuestAccountId");

                    b.HasIndex("RoomBookingId");

                    b.ToTable("Orders", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MenuItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Transaction.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BankAccount", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Transaction.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalReceivables")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookingId");

                    b.HasIndex("GuestId");

                    b.ToTable("Transactions", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Transaction.TransactionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTrashed")
                        .HasColumnType("bit");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionItems", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Verification.VerificationCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookingId");

                    b.ToTable("VerificationCodes", "ESMART");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "ESMART");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "ESMART");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "ESMART");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "ESMART");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Configuration.HotelSetting", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Configuration.SettingsCategory", "Category")
                        .WithMany("HotelSetting")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Data.ApplicationUser", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationRole", null)
                        .WithMany("JoinEntities")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.Booking", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Bookings")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ESMART.Domain.Entities.Transaction.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.GuestAccount", "GuestAccount")
                        .WithMany()
                        .HasForeignKey("GuestAccountId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Guest", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("GuestId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("BankAccount");

                    b.Navigation("Guest");

                    b.Navigation("GuestAccount");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.BookingDetail", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.FrontDesk.GuestAccount", null)
                        .WithMany("BookingDetails")
                        .HasForeignKey("GuestAccountId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.Guest", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Guests")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.GuestAccount", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Guest", "Guest")
                        .WithMany("GuestAccount")
                        .HasForeignKey("GuestId");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.GuestIdentity", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Guest", "Guest")
                        .WithOne("GuestIdentity")
                        .HasForeignKey("ESMART.Domain.Entities.FrontDesk.GuestIdentity", "GuestId");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.GuestTransaction", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ESMART.Domain.Entities.Transaction.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.GuestAccount", "GuestAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("GuestAccountId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Guest", "Guest")
                        .WithMany("GuestTransactions")
                        .HasForeignKey("GuestId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("BankAccount");

                    b.Navigation("Guest");

                    b.Navigation("GuestAccount");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.Reservation", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Reservation")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Guest", "Guest")
                        .WithMany("Reservation")
                        .HasForeignKey("GuestId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Room", "Room")
                        .WithMany("Reservation")
                        .HasForeignKey("RoomId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Guest");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.RoomBooking", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Booking", "Booking")
                        .WithMany("RoomBookings")
                        .HasForeignKey("BookingId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Booking");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.RoomNightCharge", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.FrontDesk.RoomBooking", "RoomBooking")
                        .WithMany()
                        .HasForeignKey("RoomBookingId");

                    b.Navigation("RoomBooking");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.RoomTypeReservation", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Transaction.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.GuestAccount", "GuestAccount")
                        .WithMany()
                        .HasForeignKey("GuestAccountId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId");

                    b.Navigation("BankAccount");

                    b.Navigation("Guest");

                    b.Navigation("GuestAccount");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Floor", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Room", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Rooms")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Area", "Area")
                        .WithMany("Rooms")
                        .HasForeignKey("AreaId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId");

                    b.HasOne("ESMART.Domain.Entities.RoomSettings.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Area");

                    b.Navigation("Building");

                    b.Navigation("Floor");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.MenuItem", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.StoreKeeping.InventoryItem", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("InventoryItemID");

                    b.HasOne("ESMART.Domain.Entities.StoreKeeping.MenuCategory", "MenuCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuCategoryId");

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.MenuItemRecipe", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.StoreKeeping.InventoryItem", "InventoryItem")
                        .WithMany("MenuItemRecipes")
                        .HasForeignKey("InventoryItemId");

                    b.HasOne("ESMART.Domain.Entities.StoreKeeping.MenuItem", "MenuItem")
                        .WithMany("MenuItemRecipes")
                        .HasForeignKey("MenuItemId");

                    b.Navigation("InventoryItem");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.Order", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.GuestAccount", "GuestAccount")
                        .WithMany()
                        .HasForeignKey("GuestAccountId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.RoomBooking", "RoomBooking")
                        .WithMany()
                        .HasForeignKey("RoomBookingId");

                    b.Navigation("Booking");

                    b.Navigation("GuestAccount");

                    b.Navigation("RoomBooking");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.OrderItem", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.StoreKeeping.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId");

                    b.HasOne("ESMART.Domain.Entities.StoreKeeping.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Transaction.Transaction", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Transactions")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Booking", "Booking")
                        .WithMany("Transactions")
                        .HasForeignKey("BookingId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Guest", "Guest")
                        .WithMany("Transactions")
                        .HasForeignKey("GuestId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Booking");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Transaction.TransactionItem", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("TransactionItems")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Booking", "Booking")
                        .WithMany("TransactionItems")
                        .HasForeignKey("BookingId");

                    b.HasOne("ESMART.Domain.Entities.Transaction.Transaction", "Transaction")
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Booking");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Verification.VerificationCode", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("VerificationCodes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ESMART.Domain.Entities.FrontDesk.Booking", null)
                        .WithMany("Codes")
                        .HasForeignKey("BookingId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ESMART.Domain.Entities.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Configuration.SettingsCategory", b =>
                {
                    b.Navigation("HotelSetting");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Data.ApplicationRole", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Data.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Guests");

                    b.Navigation("Reservation");

                    b.Navigation("Rooms");

                    b.Navigation("TransactionItems");

                    b.Navigation("Transactions");

                    b.Navigation("VerificationCodes");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.Booking", b =>
                {
                    b.Navigation("Codes");

                    b.Navigation("RoomBookings");

                    b.Navigation("TransactionItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.Guest", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("GuestAccount");

                    b.Navigation("GuestIdentity");

                    b.Navigation("GuestTransactions");

                    b.Navigation("Reservation");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.FrontDesk.GuestAccount", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Area", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Building", b =>
                {
                    b.Navigation("Floors");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.RoomSettings.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.InventoryItem", b =>
                {
                    b.Navigation("MenuItemRecipes");

                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.MenuCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.MenuItem", b =>
                {
                    b.Navigation("MenuItemRecipes");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.StoreKeeping.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ESMART.Domain.Entities.Transaction.Transaction", b =>
                {
                    b.Navigation("TransactionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
